name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # 代码质量检查
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
      
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: 安装依赖
        run: npm ci
      
      - name: ESLint 检查
        run: npm run lint
      
      - name: TypeScript 类型检查
        run: npm run type-check
  
  # 单元测试
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
      
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: 安装依赖
        run: npm ci
      
      - name: 运行测试
        run: npm run test:ci
      
      - name: 上传测试覆盖率
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
      
      - name: 检查测试覆盖率阈值
        run: |
          # 检查覆盖率是否达到85%
          COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          echo "当前测试覆盖率: $COVERAGE%"
          if (( $(echo "$COVERAGE < 85" | bc -l) )); then
            echo "❌ 测试覆盖率 ($COVERAGE%) 低于要求的 85%"
            exit 1
          else
            echo "✅ 测试覆盖率达标 ($COVERAGE%)"
          fi
  
  # 安全检查
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
      
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: 安全审计
        run: npm audit --audit-level=moderate
      
      - name: 检查过时依赖
        run: npm outdated || true
      
      - name: 检查敏感文件
        run: |
          # 检查是否有敏感文件泄露
          if [ -f ".env" ]; then
            echo "❌ 发现 .env 文件,不应提交到版本库"
            exit 1
          fi
          
          if [ -f ".env.local" ]; then
            echo "❌ 发现 .env.local 文件,不应提交到版本库"
            exit 1
          fi
          
          echo "✅ 未发现敏感文件"
  
  # 构建检查
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
      
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: 安装依赖
        run: npm ci
      
      - name: 构建项目
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.API_URL }}
      
      - name: 检查构建产物
        run: |
          if [ ! -d ".next" ]; then
            echo "❌ 构建失败: .next 目录不存在"
            exit 1
          fi
          
          echo "✅ 构建成功"
      
      - name: 上传构建产物
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: .next
          retention-days: 7
  
  # 性能测试
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
      
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: 安装依赖
        run: npm ci
      
      - name: 下载构建产物
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .next
      
      - name: 运行性能测试
        run: |
          echo "运行性能测试..."
          # 这里可以添加 Lighthouse CI 或其他性能测试工具
          # npm run perf:test
  
  # 代码质量报告
  quality:
    name: Code Quality Report
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
      
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: 安装依赖
        run: npm ci
      
      - name: 生成测试报告
        run: npm run test:ci
      
      - name: 评论 PR (测试覆盖率)
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          lcov-file: ./coverage/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}
  
  # 部署到预览环境 (仅 PR)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
      
      - name: 下载构建产物
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .next
      
      - name: 部署到 Vercel (预览)
        run: |
          echo "部署到 Vercel 预览环境..."
          # 这里添加实际的部署命令
          # vercel deploy --prod=false
  
  # 部署到生产环境 (仅 main 分支)
  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
      
      - name: 下载构建产物
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .next
      
      - name: 部署到生产环境
        run: |
          echo "部署到生产环境..."
          # 这里添加实际的部署命令
          # vercel deploy --prod
      
      - name: 发送部署通知
        run: |
          echo "发送部署成功通知..."
          # 可以集成钉钉、企业微信等通知
